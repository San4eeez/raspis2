import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.markdown import code
import asyncio
from datetime import datetime, timezone, timedelta
import hashlib
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7995519791:AAGfxnAh_jC0-8r6BySSafZ3KlY_OlMNBFQ"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

dp.include_router(router)

MOSCOW_TZ = timezone(timedelta(hours=3))

GROUPS = {
    18: "506", 22: "–ú1-21-1", 23: "–ú1-21-2", 24: "–ù1-21", 25: "–ú2-22",
    26: "–ú2–ö-22", 27: "–ú1-22-1", 28: "–ú1-22-2", 29: "–ù1-22", 31: "–°1-22",
    32: "–ò–í1-22-1", 33: "–ò–í1-22-2", 34: "–ò–í1–ö-22", 35: "–ò–í2-22", 36: "–ò–ü1-22",
    37: "–ò–ü2–ö-22", 38: "–ú–¢1-22", 39: "–ò–í2-21", 40: "–ò–í2–ö-21-1", 41: "–ò–í2–ö-21-2",
    42: "–ò–í1-21", 44: "–ò–ü1-21", 45: "–ò–í1–ö-21", 46: "–°1-21", 47: "–ú–¢1-21",
    60: "–ú2-23", 61: "–°1-23", 62: "–ú–¢1-23", 63: "–ú1-23-1", 64: "–ú1-23-2",
    65: "–ú1-23-3", 66: "–†2-23", 67: "–ò–í1-23-1", 68: "–ò–í1-23-2", 69: "–ò–ü1-23",
    70: "–ò–ü2-23", 125: "–ù1-24", 21: "409", 20: "408"
}

user_groups = {}


def get_user_group(user_id):
    return user_groups.get(user_id, 44)


def fetch_schedule(group_id, target_date=None):
    url = f"https://e-spo.ru/org/rasp/export/site/index?pid=1&RaspBaseSearch%5Bgroup_id%5D={group_id}&RaspBaseSearch%5Bsemestr%5D=vesna&RaspBaseSearch%5Bprepod_id%5D="
    response = requests.get(url)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, 'html.parser')
    schedule = []

    schedule_cards = soup.find_all('div', class_='card h-100')
    for card in schedule_cards:
        day_header = card.find('h5', class_='card-title')
        if day_header:
            day_info = day_header.get_text(strip=True)
            day_parts = day_info.split(' - ')
            weekday, date = day_parts if len(day_parts) == 2 else ("", "")

            if target_date and target_date != date:
                continue

        table = card.find('table', class_='table table-hover table-striped gs-5')
        if table:
            rows = table.find_all('tr')
            lessons = []
            for row in rows:
                columns = row.find_all('td')
                if len(columns) >= 4:
                    lesson_number_and_time = columns[0].text.strip()
                    parts = lesson_number_and_time.split(maxsplit=1)
                    lesson_number = parts[0]
                    time = parts[1] if len(parts) > 1 else ""

                    subject_data = columns[1].get_text(" ", strip=True).replace("–†–¢–ö", "").strip()
                    room = columns[2].get_text(strip=True)
                    teacher = columns[3].get_text(strip=True)

                    if subject_data:
                        lessons.append(
                            f"–£—Ä–æ–∫ {lesson_number} {time}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_data}\n–ö–∞–±–∏–Ω–µ—Ç: {room}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n")

            if lessons:
                schedule.append(f"{weekday}, {date}\n" + "\n".join(lessons))

    return schedule


@router.message(Command("start"))
async def start(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=keyboard)


@router.message()
async def button_handler(message: Message):
    user_id = message.from_user.id
    group_id = get_user_group(user_id)

    if message.text == "üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        today_date = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y")
        schedule = fetch_schedule(group_id, target_date=today_date)
    elif message.text == "üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule = fetch_schedule(group_id)
    elif message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"group_{gid}")] for gid, name in
                             GROUPS.items()]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
        return
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return

    message_text = "\n\n".join(schedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await message.answer(code(message_text), parse_mode="MarkdownV2")


@router.callback_query()
async def change_group(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = int(callback.data.split("_")[1])
    user_groups[user_id] = group_id
    await callback.message.answer(f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {GROUPS[group_id]}")
    await callback.answer()


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
