from aiogram import Router, types, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from aiogram.utils.markdown import code
from datetime import datetime
from models import GROUPS, TEACHERS
from services import fetch_schedule
from analytics import log_request, send_analytics
import json
import asyncio

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    with open('user_groups.json', 'r') as file:
        user_groups = json.load(file)
except FileNotFoundError:
    user_groups = {}


def save_user_groups():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open('user_groups.json', 'w') as file:
        json.dump(user_groups, file)


def get_user_group(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω."""
    return user_groups.get(str(user_id), 44)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –¥–ª—è JSON


def split_message(text: str, max_length: int = 4096) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


@router.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")],
        [KeyboardButton(text="üë®‚Äçüè´ –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=keyboard)


@router.message(Command("analytics"))
async def analytics_command(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics."""
    await send_analytics(bot, message.chat.id)  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id


@router.message()
async def button_handler(message: Message, command: CommandObject = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞."""
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    log_request(user_id, username)

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    if command and command.prefix == "@":
        command_text = command.command
    else:
        command_text = message.text

    user_id = message.from_user.id
    group_id = get_user_group(user_id)

    if command_text == "üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" or command_text == "—Å–µ–≥–æ–¥–Ω—è":
        today_date = datetime.now().strftime("%d.%m.%Y")
        schedule = fetch_schedule(group_id, entity_type="group", target_date=today_date)
    elif command_text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" or command_text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule = fetch_schedule(group_id, entity_type="group")
    elif command_text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É" or command_text == "—Å–º–µ–Ω–∏—Ç—å_–≥—Ä—É–ø–ø—É":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"group_{gid}")] for gid, name in
                             GROUPS.items()]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
        return
    elif command_text == "üë®‚Äçüè´ –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" or command_text == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=teacher["fio"], callback_data=f"teacher_{teacher['value']}")] for
                            teacher in TEACHERS]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
        return
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return

    message_text = "\n\n".join(schedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    message_parts = split_message(message_text)
    for part in message_parts:
        await message.answer(code(part), parse_mode="MarkdownV2")
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏


@router.callback_query()
async def callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    data = callback.data
    if data.startswith("group_"):
        user_id = str(callback.from_user.id)
        group_id = int(data.split("_")[1])
        user_groups[user_id] = group_id
        save_user_groups()
        await callback.message.answer(f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {GROUPS[group_id]}")
    elif data.startswith("teacher_"):
        teacher_id = data.split("_")[1]
        teacher_name = next((teacher["fio"] for teacher in TEACHERS if teacher["value"] == teacher_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        today_date = datetime.now().strftime("%d.%m.%Y")
        schedule = fetch_schedule(teacher_id, entity_type="teacher", target_date=today_date)
        message_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}:\n\n" + "\n\n".join(
            schedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        message_parts = split_message(message_text)
        for part in message_parts:
            await callback.message.answer(code(part), parse_mode="MarkdownV2")
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await callback.answer()


@router.inline_query()
async def inline_handler(query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    user_id = query.from_user.id
    group_id = get_user_group(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule = fetch_schedule(group_id, entity_type="group")
    day_shedule = fetch_schedule(group_id, entity_type="group", target_date=datetime.now().strftime("%d.%m.%Y"))
    message_text = "\n\n".join(schedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    day_text = "\n\n".join(day_shedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    message_parts = split_message(message_text)
    day_parts = split_message(day_text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–µ–π
    results = []
    for i, part in enumerate(message_parts):
        results.append(
            InlineQueryResultArticle(
                id=f"1_{i}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                title=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (—á–∞—Å—Ç—å {i + 1})",
                input_message_content=InputTextMessageContent(
                    message_text=part
                ),
                description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç.",
            )
        )
    for i, part in enumerate(day_parts):
        results.append(
            InlineQueryResultArticle(
                id=f"2_{i}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                title=f"üìÖ –°–µ–≥–æ–¥–Ω—è (—á–∞—Å—Ç—å {i + 1})",
                input_message_content=InputTextMessageContent(
                    message_text=part
                ),
                description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç.",
            )
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.answer(results, cache_time=1, is_personal=True)