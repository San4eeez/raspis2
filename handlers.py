# handlers.py

from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from aiogram.utils.markdown import code
from datetime import datetime
from models import GROUPS, TEACHERS
from services import fetch_schedule
import json

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    with open('user_groups.json', 'r') as file:
        user_groups = json.load(file)
except FileNotFoundError:
    user_groups = {}


def save_user_groups():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open('user_groups.json', 'w') as file:
        json.dump(user_groups, file)


def get_user_group(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω."""
    return user_groups.get(str(user_id), 44)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –¥–ª—è JSON


@router.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")],
        [KeyboardButton(text="üë®‚Äçüè´ –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=keyboard)


@router.message()
async def button_handler(message: Message, command: CommandObject = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞."""
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    if command and command.prefix == "@":
        command_text = command.command
    else:
        command_text = message.text

    user_id = message.from_user.id
    group_id = get_user_group(user_id)

    if command_text == "üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" or command_text == "—Å–µ–≥–æ–¥–Ω—è":
        today_date = datetime.now().strftime("%d.%m.%Y")
        schedule = fetch_schedule(group_id, entity_type="group", target_date=today_date)
    elif command_text == "üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" or command_text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule = fetch_schedule(group_id, entity_type="group")
    elif command_text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É" or command_text == "—Å–º–µ–Ω–∏—Ç—å_–≥—Ä—É–ø–ø—É":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"group_{gid}")] for gid, name in
                             GROUPS.items()]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
        return
    elif command_text == "üë®‚Äçüè´ –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" or command_text == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=teacher["fio"], callback_data=f"teacher_{teacher['value']}")] for
                            teacher in TEACHERS]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
        return
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return

    message_text = "\n\n".join(schedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await message.answer(code(message_text), parse_mode="MarkdownV2")


@router.callback_query()
async def callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    data = callback.data
    if data.startswith("group_"):
        user_id = str(callback.from_user.id)
        group_id = int(data.split("_")[1])
        user_groups[user_id] = group_id
        save_user_groups()
        await callback.message.answer(f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {GROUPS[group_id]}")
    elif data.startswith("teacher_"):
        teacher_id = data.split("_")[1]
        teacher_name = next((teacher["fio"] for teacher in TEACHERS if teacher["value"] == teacher_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        today_date = datetime.now().strftime("%d.%m.%Y")
        schedule = fetch_schedule(teacher_id, entity_type="teacher", target_date=today_date)
        message_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}:\n\n" + "\n\n".join(
            schedule) if schedule else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await callback.message.answer(code(message_text), parse_mode="MarkdownV2")
    await callback.answer()


@router.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    commands = [
        {"title": "üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "command": "—Å–µ–≥–æ–¥–Ω—è"},
        {"title": "üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "description": "–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "command": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"},
        {"title": "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", "description": "–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É", "command": "—Å–º–µ–Ω–∏—Ç—å_–≥—Ä—É–ø–ø—É"},
        {"title": "üë®‚Äçüè´ –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "description": "–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "command": "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"},
    ]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    results = [
        InlineQueryResultArticle(
            id=str(index),
            title=cmd["title"],
            description=cmd["description"],
            input_message_content=InputTextMessageContent(
                message_text=f"@{inline_query.bot.username} {cmd['command']}"
            ),
        )
        for index, cmd in enumerate(commands)
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await inline_query.answer(results, cache_time=1)